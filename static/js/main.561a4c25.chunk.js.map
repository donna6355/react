{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","helpers.js","App.js","index.js"],"names":["style","background","border","boxSizing","fontSize","fontWeight","cursor","ouline","Square","value","onClick","borderRadius","width","height","margin","display","gridTemplate","Board","squares","map","square","i","key","styles","fontFamily","textAlign","btnStyle","outline","backgroundColor","Game","useState","Array","fill","board","setBoard","xIsNext","setXisNext","winner","lines","length","a","b","c","calculateWinner","boardCopy","App","ReactDOM","render","document","getElementById"],"mappings":"gKACA,IAAMA,EAAQ,CACbC,WAAY,SACZC,OAAQ,sBACRC,UAAW,cACXC,SAAU,OACVC,WAAY,MACZC,OAAQ,UACRC,OAAQ,QAWMC,EARA,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QACxB,OACC,4BAAQV,MAAOA,EAAOU,QAASA,GAC7BD,ICXET,EAAQ,CACbE,OAAQ,sBACRC,UAAW,aACXQ,aAAc,OACdC,MAAO,QACPC,OAAQ,QACRC,OAAQ,SACRC,QAAS,OACTC,aAAc,iCAaAC,EAVD,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,QAASR,EAAc,EAAdA,QACzB,OACC,yBAAKV,MAAOA,GACVkB,EAAQC,KAAI,SAACC,EAAQC,GACrB,OAAO,kBAAC,EAAD,CAAQC,IAAKD,EAAGZ,MAAOW,EAAQV,QAAS,kBAAMA,EAAQW,WCd3DE,EAAQ,CACbX,MAAM,QACNE,OAAO,YACPU,WAAY,SACZC,UAAU,SACVpB,WAAW,QAGNqB,EAAW,CAChBC,QAAQ,OACRzB,OAAO,OACPD,WAAW,OACX2B,gBAAgB,OAChBJ,WAAY,SACZnB,WAAW,QAmCGwB,EAhCF,WAAO,IAAD,EACQC,mBAASC,MAAM,GAAGC,KAAK,OAD/B,mBACXC,EADW,KACJC,EADI,OAEYJ,oBAAS,GAFrB,mBAEXK,EAFW,KAEFC,EAFE,KAGZC,ECxBA,SAAyBnB,GAW/B,IAVA,IAAMoB,EAAQ,CACb,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAECjB,EAAI,EAAGA,EAAIiB,EAAMC,OAAQlB,IAAK,CAAC,IAAD,cACpBiB,EAAMjB,GADc,GAC/BmB,EAD+B,KAC5BC,EAD4B,KACzBC,EADyB,KAEtC,GAAIxB,EAAQsB,IAAMtB,EAAQsB,KAAOtB,EAAQuB,IAAMvB,EAAQsB,KAAOtB,EAAQwB,GACrE,OAAOxB,EAAQsB,GAGjB,OAAO,KDOQG,CAAgBV,GAkB/B,OACA,oCACA,kBAAC,EAAD,CAAOf,QAASe,EAAOvB,QAlBH,SAAAW,GACnB,IAAMuB,EAAS,YAAOX,GAElBI,GAAUO,EAAUvB,KAExBuB,EAAUvB,GAAKc,EAAU,IAAM,IAC/BD,EAASU,GACTR,GAAYD,OAYb,yBAAKnC,MAAOuB,GACX,2BAAIc,EAAO,YAAYA,EAAO,iBAAiBF,EAAQ,IAAI,MATrD,4BAAQnC,MAAO0B,EAAUhB,QAAS,kBAAKwB,EAASH,MAAM,GAAGC,KAAK,SAA9D,iBE9BOa,EAJH,WACX,OAAO,kBAAC,EAAD,OCARC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.561a4c25.chunk.js","sourcesContent":["import React from 'react';\r\nconst style = {\r\n\tbackground: 'yellow',\r\n\tborder: '2px solid orangered',\r\n\tboxSizing: 'border -box',\r\n\tfontSize: '30px',\r\n\tfontWeight: '800',\r\n\tcursor: 'pointer',\r\n\touline: 'none'\r\n};\r\n\r\nconst Square = ({ value, onClick }) => {\r\n\treturn (\r\n\t\t<button style={style} onClick={onClick}>\r\n\t\t\t{value}\r\n\t\t</button>\r\n\t);\r\n};\r\n\r\nexport default Square;\r\n","import React from 'react';\r\nimport Square from './Square';\r\n\r\nconst style = {\r\n\tborder: '4px solid orangered',\r\n\tboxSizing: 'border-box',\r\n\tborderRadius: '10px',\r\n\twidth: '250px',\r\n\theight: '250px',\r\n\tmargin: '0 auto',\r\n\tdisplay: 'grid',\r\n\tgridTemplate: 'repeat(3,1fr) / repeat(3,1fr)'\r\n};\r\n\r\nconst Board = ({ squares, onClick }) => {\r\n\treturn (\r\n\t\t<div style={style}>\r\n\t\t\t{squares.map((square, i) => {\r\n\t\t\t\treturn <Square key={i} value={square} onClick={() => onClick(i)} />;\r\n\t\t\t})}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Board;\r\n","import React, { useState } from 'react';\r\nimport { calculateWinner } from '../helpers.js';\r\nimport Board from './Board';\r\n\r\nconst styles= {\r\n\twidth:'200px',\r\n\tmargin:'20px auto',\r\n\tfontFamily: 'roboto',\r\n\ttextAlign:'center',\r\n\tfontWeight:'bold'\r\n}\r\n\r\nconst btnStyle = {\r\n\toutline:'none',\r\n\tborder:'none',\r\n\tbackground:'none',\r\n\tbackgroundColor:'pink',\t\r\n\tfontFamily: 'roboto',\r\n\tfontWeight:'bold'\r\n}\r\n\r\nconst Game = () => {\r\n\tconst [board, setBoard] = useState(Array(9).fill(null));\r\n\tconst [xIsNext, setXisNext] = useState(true);\r\n\tconst winner = calculateWinner(board);\r\n\r\n\tconst handleClick = i => {\r\n\t\tconst boardCopy = [...board];\r\n\t\t// if user click an occupied square or if game is won, return\r\n\t\tif (winner || boardCopy[i]) return;\r\n\t\t// Put an X or an O in the clicked square\r\n\t\tboardCopy[i] = xIsNext ? 'X' : 'O';\r\n\t\tsetBoard(boardCopy);\r\n\t\tsetXisNext(!xIsNext);\r\n\t};\r\n\r\n\tconst renderMoves = () => {\r\n\t\treturn<button style={btnStyle} onClick={()=> setBoard(Array(9).fill(null))}>\r\n\t\t\tStart Game\r\n\t\t</button>\r\n\t};\r\n\r\n\treturn (\r\n\t<>\r\n\t<Board squares={board} onClick={handleClick} />\r\n\t<div style={styles}>\r\n\t\t<p>{winner?'Winner : '+winner:'Next Player: '+(xIsNext?'X':'O' )}</p>\r\n\t\t{renderMoves()}\r\n\t</div>\r\n\t</>\r\n\t)\r\n};\r\n\r\nexport default Game;\r\n","export function calculateWinner(squares) {\r\n\tconst lines = [\r\n\t\t[0, 1, 2],\r\n\t\t[3, 4, 5],\r\n\t\t[6, 7, 8],\r\n\t\t[0, 3, 6],\r\n\t\t[1, 4, 7],\r\n\t\t[2, 5, 8],\r\n\t\t[0, 4, 8],\r\n\t\t[2, 4, 6]\r\n\t];\r\n\tfor (let i = 0; i < lines.length; i++) {\r\n\t\tconst [a, b, c] = lines[i];\r\n\t\tif (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n\t\t\treturn squares[a];\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n}\r\n\r\n/*\r\nexport function calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n */\r\n","import React from 'react';\nimport Game from './components/Game';\n\nconst App = () => {\n\treturn <Game />;\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}